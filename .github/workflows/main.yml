name: MT5 Wine Setup and Account Check

on:
  workflow_dispatch:
    inputs:
      mt5_login:
        description: 'MT5 Login'
        required: true
        type: string
      mt5_password:
        description: 'MT5 Password'
        required: true
        type: string
      mt5_server:
        description: 'MT5 Server'
        required: true
        type: string
        default: 'MetaQuotes-Demo'

jobs:
  test-mt5-login:
    runs-on: ubuntu-latest
    env:
      DISPLAY: :99  # Set the display for the entire job
    steps:
    # Step 1: Checkout repository first
    - name: Checkout repository
      uses: actions/checkout@v4

    # Step 2: Install Wine and dependencies, including x11-utils
    - name: Install Wine and dependencies
      run: |
        sudo dpkg --add-architecture i386
        sudo mkdir -pm755 /etc/apt/keyrings
        sudo wget -O /etc/apt/keyrings/winehq-archive.key https://dl.winehq.org/wine-builds/winehq.key
        sudo wget -NP /etc/apt/sources.list.d/ https://dl.winehq.org/wine-builds/ubuntu/dists/jammy/winehq-jammy.sources
        sudo apt update
        sudo apt install -y winehq-stable winetricks xvfb x11-utils

    # Step 3: Start Xvfb (now xdpyinfo will be available)
    - name: Start Xvfb
      run: |
        nohup Xvfb :99 -screen 0 1024x768x16 > xvfb.log 2>&1 &
        sleep 5
        xdpyinfo -display :99 || (echo "Xvfb failed to start" && cat xvfb.log && exit 1)

    # Step 4: Configure Wine
    - name: Configure Wine
      run: |
        export WINEDEBUG=-all  # Suppress Wine debug output
        winecfg /v win10      # Set Wine to Windows 10 mode
        winetricks -q vcrun2019 corefonts  # Install common dependencies

    # Step 5: Download MT5
    - name: Download MT5
      run: |
        wget -O mt5setup.exe "https://download.mql5.com/cdn/web/metaquotes.software.corp/mt5/mt5setup.exe"

    # Step 6: Install MT5
    - name: Install MT5
      run: |
        export WINEDEBUG=-all
        wine mt5setup.exe /S  # Silent installation
        sleep 60              # Wait for installation to complete

    # Step 7: Check MT5 Installation
    - name: Check MT5 Installation
      run: |
        ls -l ~/.wine/drive_c/Program\ Files/  # Verify MT5 is installed

    # Step 8: Create MT5 Login Test Script
    - name: Create MT5 Login Test Script
      run: |
        cat > login_test.py << 'EOF'
        import subprocess
        import time
        import sys
        import os
        
        def run_mt5_login_test():
            login = os.environ.get('MT5_LOGIN', '')
            password = os.environ.get('MT5_PASSWORD', '')
            server = os.environ.get('MT5_SERVER', '')
            
            if not all([login, password, server]):
                print("ERROR: Missing login credentials")
                return False
                
            mt5_path = os.path.expanduser("~/.wine/drive_c/Program Files/MetaTrader 5/terminal64.exe")
            if not os.path.exists(mt5_path):
                print(f"ERROR: MT5 executable not found at {mt5_path}")
                return False
            
            try:
                cmd = [
                    "wine", mt5_path,
                    f"/login:{login}",
                    f"/password:{password}",
                    f"/server:{server}",
                    "/portable"
                ]
                
                print("Starting MT5 with login credentials...")
                process = subprocess.Popen(
                    cmd, 
                    stdout=subprocess.PIPE, 
                    stderr=subprocess.PIPE,
                    env={**os.environ, 'WINEDEBUG': '-all'}
                )
                
                time.sleep(45)  # Wait for MT5 to start
                if process.poll() is None:
                    print("MT5 is running, assuming login success...")
                    process.terminate()
                    try:
                        process.wait(timeout=10)
                    except subprocess.TimeoutExpired:
                        process.kill()
                    return True
                else:
                    stdout, stderr = process.communicate()
                    print(f"MT5 exited early. Stdout: {stdout.decode()}")
                    print(f"Stderr: {stderr.decode()}")
                    return False
                    
            except Exception as e:
                print(f"Error running MT5: {e}")
                return False
        
        if __name__ == "__main__":
            success = run_mt5_login_test()
            if success:
                print("✅ MT5 login test completed")
                sys.exit(0)
            else:
                print("❌ MT5 login test failed")
                sys.exit(1)
        EOF

    # Step 9: Run MT5 Login Test
    - name: Run MT5 Login Test
      env:
        MT5_LOGIN: ${{ github.event.inputs.mt5_login }}
        MT5_PASSWORD: ${{ github.event.inputs.mt5_password }}
        MT5_SERVER: ${{ github.event.inputs.mt5_server }}
      run: |
        python3 login_test.py

    # Step 10: Clean Up
    - name: Clean Up
      if: always()
      run: |
        pkill -f wine || true
        pkill -f Xvfb || true
