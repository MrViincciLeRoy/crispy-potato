name: MT5 Wine Setup and Account Check

on:
  workflow_dispatch:
    inputs:
      mt5_login:
        description: 'MT5 Login'
        required: true
        type: string
      mt5_password:
        description: 'MT5 Password'
        required: true
        type: string
      mt5_server:
        description: 'MT5 Server'
        required: true
        type: string
        default: 'MetaQuotes-Demo'

jobs:
  test-mt5-login:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Install Wine and dependencies
      run: |
        sudo dpkg --add-architecture i386
        sudo mkdir -pm755 /etc/apt/keyrings
        sudo wget -O /etc/apt/keyrings/winehq-archive.key https://dl.winehq.org/wine-builds/winehq.key
        sudo wget -NP /etc/apt/sources.list.d/ https://dl.winehq.org/wine-builds/ubuntu/dists/jammy/winehq-jammy.sources
        sudo apt update
        sudo apt install -y winehq-stable winetricks xvfb
        
    - name: Configure Wine
      run: |
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x16 &
        export WINEDEBUG=-all
        winecfg /v win10
        winetricks -q vcrun2019 corefonts
        
    - name: Download MT5
      run: |
        wget -O mt5setup.exe "https://download.mql5.com/cdn/web/metaquotes.software.corp/mt5/mt5setup.exe"
        
    - name: Install MT5
      run: |
        export DISPLAY=:99
        export WINEDEBUG=-all
        wine mt5setup.exe /S
        sleep 30
        
    - name: Create MT5 login script
      run: |
        cat > login_test.py << 'EOF'
        import subprocess
        import time
        import sys
        import os
        
        def run_mt5_login_test():
            login = os.environ.get('MT5_LOGIN', '')
            password = os.environ.get('MT5_PASSWORD', '')
            server = os.environ.get('MT5_SERVER', '')
            
            if not all([login, password, server]):
                print("ERROR: Missing login credentials")
                return False
                
            # Create MQL5 script for login test
            mql_script = f'''
        //+------------------------------------------------------------------+
        //| Script program start function                                    |
        //+------------------------------------------------------------------+
        void OnStart()
          {{
           string login = "{login}";
           string password = "{password}";
           string server = "{server}";
           
           // Attempt login
           if(AccountInfoInteger(ACCOUNT_LOGIN) == StringToInteger(login))
             {{
              Print("LOGIN SUCCESS: Already connected to account ", login);
              ExpertRemove();
              return;
             }}
           
           // Try to connect
           if(TerminalInfoInteger(TERMINAL_CONNECTED))
             {{
              Print("LOGIN SUCCESS: Terminal connected");
             }}
           else
             {{
              Print("LOGIN FAILED: Terminal not connected");
             }}
             
           Print("Account Server: ", AccountInfoString(ACCOUNT_SERVER));
           Print("Account Number: ", AccountInfoInteger(ACCOUNT_LOGIN));
           Print("Account Balance: ", AccountInfoDouble(ACCOUNT_BALANCE));
           
           ExpertRemove();
          }}
        '''
            
            # Write MQL script
            mt5_path = os.path.expanduser("~/.wine/drive_c/Program Files/MetaTrader 5")
            experts_path = os.path.join(mt5_path, "MQL5", "Experts")
            os.makedirs(experts_path, exist_ok=True)
            
            script_path = os.path.join(experts_path, "LoginTest.mq5")
            with open(script_path, 'w') as f:
                f.write(mql_script)
            
            print(f"Created login test script at: {script_path}")
            
            # Run MT5 with login parameters
            try:
                mt5_exe = os.path.join(mt5_path, "terminal64.exe")
                cmd = [
                    "wine", mt5_exe,
                    f"/login:{login}",
                    f"/password:{password}",
                    f"/server:{server}",
                    "/portable"
                ]
                
                print("Starting MT5 with login credentials...")
                process = subprocess.Popen(
                    cmd, 
                    stdout=subprocess.PIPE, 
                    stderr=subprocess.PIPE,
                    env={**os.environ, 'DISPLAY': ':99', 'WINEDEBUG': '-all'}
                )
                
                # Wait for MT5 to start and attempt login
                time.sleep(45)
                
                # Check if process is still running
                if process.poll() is None:
                    print("MT5 is running, checking login status...")
                    
                    # Terminate MT5
                    process.terminate()
                    try:
                        process.wait(timeout=10)
                    except subprocess.TimeoutExpired:
                        process.kill()
                    
                    return True
                else:
                    stdout, stderr = process.communicate()
                    print(f"MT5 exited early. Stdout: {stdout.decode()}")
                    print(f"Stderr: {stderr.decode()}")
                    return False
                    
            except Exception as e:
                print(f"Error running MT5: {e}")
                return False
        
        if __name__ == "__main__":
            success = run_mt5_login_test()
            if success:
                print("✅ MT5 login test completed")
                sys.exit(0)
            else:
                print("❌ MT5 login test failed")
                sys.exit(1)
        EOF
        
    - name: Run MT5 Login Test
      env:
        MT5_LOGIN: ${{ github.event.inputs.mt5_login }}
        MT5_PASSWORD: ${{ github.event.inputs.mt5_password }}
        MT5_SERVER: ${{ github.event.inputs.mt5_server }}
        DISPLAY: :99
      run: |
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x16 &
        sleep 5
        python3 login_test.py
        
    - name: Check Wine processes
      if: always()
      run: |
        ps aux | grep wine || true
        pkill -f wine || true
        pkill -f Xvfb || true
